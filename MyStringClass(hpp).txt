#ifndef CS23001_STRING_INTERFACE_HPP
#define CS23001_STRING_INTERFACE_HPP

#include <iostream>
#include <cassert>
#include <vector>

const int STRING_SIZE = 256;
/**
 * @invariant str[length()] == 0
 *         && 0 <= length() <= capacity()
 *         && capacity() == STRING_SIZE - 1
 *
 */
class String {
private:
  char* str;
  int capacityOfString;
public:
    // constructor: empty string, String('x'), and String(int,"abcd")
    String();
    String(int);
    String(char);
    String(const char*);
    String(int, const char*);

    //copy constructor, deconstructor, assignment overload
    String(const String&);
    String& operator=(String);
	~String();


  //Swap function
    void swap(String&);

    // subscript: accessor/modifier and accessor
    char & operator[](int);
    char   operator[](int) const;

    // max chars that can be stored (not including null terminator)
    int capacity() const;
    void resetCapacity(int);
    // number of char in string
    int length  () const;

    int StringToInt() const;

    String subString(int, int)const;
    int findChar(char, int)const;
  String CharAsString(const String&, int)const;
    int findSubString(const String&, int pos)const;
    // concatenation
    String   operator+ (const String &) const;
    String & operator+=(String);

    // relational methods
    bool operator==(const String &) const;
    bool operator< (const String &) const;

    //Split
    std::vector<String> split(char)const;

    //clear
    String clear();

    // i/o
    friend std::istream & operator>>(std::istream &, String &);
    friend std::ostream & operator<<(std::ostream &, const String &);

};

// free functios for concatenation and relational
String operator+       (const char[],  const String &);
String operator+       (char,          const String &);
bool   operator==      (const char[],  const String &);
bool   operator==      (char,          const String &);
bool   operator<       (const char[],  const String &);
bool   operator<       (char,          const String &);
bool   operator<=      (const String &, const String &);
bool   operator!=      (const String &, const String &);
bool   operator>=      (const String &, const String &);
bool   operator>       (const String &, const String &);

#endif
