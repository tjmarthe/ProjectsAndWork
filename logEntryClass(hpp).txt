#ifndef CS_LOGENTRY_H_
#define CS_LOGENTRY_H_

////////////////////////////////////////////////////////////
//
// File:        logentry.hpp
//
// Version:     1.0
// Date:
// Author:
//
// Description: Class definition for a log entry.
//
//
//

////////////////////////////////////////////////////////////
#include <iostream>
#include <vector>

#include "string.hpp"

////////////////////////////////////////////////////////////
class Date {
public:
  Date(){
    day = '\0';
    month = '\0';
    year = 0;
  }
  Date(String d, String m, int y) {
    day = d;
    month = m;
    year = y;
  }
  void setDate(String d, String m, int y){
    day = d;
    std::cout << d << " " << m << " " << y << std::endl;
    month = m;
    year = y;
  }
  String getDay()const {return day;}
  String getMonth()const {return month;}
  int getYear()const {return year;}
  friend std::ostream& operator<<(std::ostream& out, const Date d){
    out << d.day << "/" << d.month << "/" << d.year << std::endl;
    return out;
  }

private:
    String  day, month;
    int     year;
};

////////////////////////////////////////////////////////////
class Time {
  public:
  Time(){
    hour = 0;
    minute = 0;
	 second = 0;
  }
  Time(int h, int m, int s) {
    hour = h;
    minute = m;
    second = s;
  }
  void setTime(int h, int m, int s) {
    hour = h;
    std::cout << " " << h << " " << m << " " << s << std::endl;
    minute = m;
    second = s;
  }

  int getHour()const{ return hour;}
  int getMinute()const{ return minute;}
  int getSecond()const{ return second;}
  friend std::ostream& operator<<(std::ostream& out, const Time& t){
    out << t.hour << ":" << t.minute << ":" << t.second << std::endl;
    return out;
  }
  private:
    int     hour, minute, second;
};


////////////////////////////////////////////////////////////
class LogEntry {
public:
            LogEntry() {};
			  LogEntry(String);
            LogEntry clear();
    friend  std::ostream& operator<<(std::ostream&, const LogEntry&);
  String getHost()const{return host;}
  String getRequest()const{return request;}
  String getStatus()const{return status;}
  int getBytes()const{ return number_of_bytes;}
  Time getTime()const{
    time.getHour();
    time.getMinute();
    time.getSecond();
  }
  Date getDate()const {
    date.getDay();
    date.getMonth();
    date.getYear();
  }
private:
    String  host;
    Date    date;
    Time    time;
    String  request;
    String  status;
    int     number_of_bytes;
};


////////////////////////////////////////////////////////////
//
// Free functions
	std::vector<LogEntry>   parse       (std::istream&);
	void                    output_all  (std::ostream&, const std::vector<LogEntry> &);
	void                    by_host     (std::ostream&, const std::vector<LogEntry> &);
	int                     byte_count  (const std::vector<LogEntry>&);

#endif

